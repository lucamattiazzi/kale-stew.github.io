{"version":3,"sources":["webpack:///./src/utils/dates.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/now/index.jsx","webpack:///./src/pages/now.js"],"names":["MONTHS","1","2","3","4","5","6","7","8","9","10","11","12","formatDate","date","arr","split","getRandomItem","Math","floor","random","length","NowCard","post","dayOfWeek","className","Object","entries","map","key","value","NOW_KEYS","Now","state","useState","type","setType","useEffect","query","nowQuery","render","data","sortedByMostRecent","allNow","nodes","sort","a","b","mostRecentPost","randomPost","LATEST","location","postType","setPostType","title","href","onClick","RANDOM"],"mappings":"2FAAA,sCAAMA,EAAS,CACbC,EAAG,UACHC,EAAG,WACHC,EAAG,QACHC,EAAG,QACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,YACHC,GAAI,UACJC,GAAI,WACJC,GAAI,YAGOC,EAAa,SAAAC,GACxB,IAAMC,EAAMD,EAAKE,MAAM,KACvB,OAAUhB,EAAOe,EAAI,IAArB,IAA4BA,EAAI,GAAhC,KAAuCA,EAAI,K,kCCjB7C,kCAAO,IAAME,EAAgB,SAAAF,GAAG,OAAIA,EAAIG,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,W,0ICSjEC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACd,oCACE,4BACGA,EAAKC,UADR,KACqBX,YAAWU,EAAKT,OAErC,wBAAIW,UAAU,eACXC,OAAOC,QAAQJ,GAAMK,KAAI,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KAC1C,OAAQC,IAASF,IAASC,EACxB,wBAAID,IAAKA,GACP,2BAAIE,IAASF,GAAb,KADF,IAC2BC,GAFK,WAyB7BE,EAAM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACRC,mBAASD,GAA1BE,EADyB,KACnBC,EADmB,KAIhC,OAFAC,qBAAU,kBAAMD,EAAQH,KAAQ,CAACA,IAG/B,kBAAC,cAAD,CACEK,MAAOC,EACPC,OAAQ,SAAAC,GAAS,IAETC,EADaD,EAAXE,OAC0BC,MAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEhC,KAAOiC,EAAEjC,QAC5DkC,EAAiBN,EAAmB,GACpCO,EAAahC,YAAcyB,GAEjC,OAAOP,IAASe,IACd,kBAAC,EAAD,CAAS3B,KAAMyB,IAEf,kBAAC,EAAD,CAASzB,KAAM0B,QAOnBV,EAAQ,aCzDC,sBAAmB,IAAhBY,EAAe,EAAfA,SAAe,EACCjB,mBAASgB,KAAlCE,EADwB,KACdC,EADc,KAG/B,OACE,kBAAC,IAAD,CAAQF,SAAUA,EAAUG,MAAM,wBAChC,kBAAC,IAAD,CAAMA,MAAM,QACZ,kBAAC,EAAD,CAAKrB,MAAOmB,IACZ,uBAAG3B,UAAU,WAAW8B,KAAK,+BAA7B,sBAGA,6BACA,4BAAQ9B,UAAU,WAAW+B,QAAS,kBAAMH,EAAYI,OAAxD","file":"component---src-pages-now-js-2546558d0afa4382b4d0.js","sourcesContent":["const MONTHS = {\n  1: 'January',\n  2: 'February',\n  3: 'March',\n  4: 'April',\n  5: 'May',\n  6: 'June',\n  7: 'July',\n  8: 'August',\n  9: 'September',\n  10: 'October',\n  11: 'November',\n  12: 'December',\n}\n\nexport const formatDate = date => {\n  const arr = date.split('/')\n  return `${MONTHS[arr[0]]} ${arr[1]}, ${arr[2]}`\n}\n\nexport const getMostRecentDate = posts => {\n  return Object.keys(posts)\n    .toString()\n    .split(',')[0]\n}\n","export const getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)]\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { StaticQuery, graphql } from 'gatsby'\nimport { formatDate } from '../../utils/dates'\nimport { getRandomItem } from '../../utils/helpers'\n\nimport { LATEST, NOW_KEYS } from '../../constants'\n\nconst NowCard = ({ post }) => (\n  <>\n    <h2>\n      {post.dayOfWeek}, {formatDate(post.date)}\n    </h2>\n    <ul className=\"now-wrapper\">\n      {Object.entries(post).map(([key, value]) => {\n        return !NOW_KEYS[key] || !value ? null : (\n          <li key={key}>\n            <b>{NOW_KEYS[key]}:</b> {value}\n          </li>\n        )\n      })}\n    </ul>\n  </>\n)\n\nNowCard.propTypes = {\n  post: PropTypes.shape({\n    celebrating: PropTypes.string,\n    date: PropTypes.string,\n    dayOfWeek: PropTypes.string,\n    learning: PropTypes.string,\n    listeningTo: PropTypes.string,\n    location: PropTypes.string,\n    reading: PropTypes.string,\n    travel: PropTypes.string,\n    watching: PropTypes.string,\n    workingOn: PropTypes.string,\n  }),\n}\n\nexport const Now = ({ state }) => {\n  const [type, setType] = useState(state)\n  useEffect(() => setType(state), [state])\n\n  return (\n    <StaticQuery\n      query={nowQuery}\n      render={data => {\n        const { allNow } = data\n        const sortedByMostRecent = allNow.nodes.sort((a, b) => a.date - b.date)\n        const mostRecentPost = sortedByMostRecent[0]\n        const randomPost = getRandomItem(sortedByMostRecent)\n\n        return type === LATEST ? (\n          <NowCard post={mostRecentPost} />\n        ) : (\n          <NowCard post={randomPost} />\n        )\n      }}\n    />\n  )\n}\n\nconst nowQuery = graphql`\n  query NowQuery {\n    allNow {\n      nodes {\n        date\n        dayOfWeek\n        location\n        travel\n        reading\n        celebrating\n        watching\n        listeningTo\n        learning\n        workingOn\n      }\n    }\n  }\n`\n","import React, { useState } from 'react'\nimport { Layout } from '../layout'\nimport { Head } from '../components/head'\nimport { Now } from '../components/now'\n\nimport { LATEST, RANDOM } from '../constants'\n\nexport default ({ location }) => {\n  const [postType, setPostType] = useState(LATEST)\n\n  return (\n    <Layout location={location} title=\"What I'm Doing *Now*\">\n      <Head title=\"Now\" />\n      <Now state={postType} />\n      <a className=\"now-link\" href=\"https://nownownow.com/about\">\n        What is this page?\n      </a>\n      <br />\n      <button className=\"now-link\" onClick={() => setPostType(RANDOM)}>\n        Visit a random now from the past\n      </button>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}